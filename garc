#!/bin/julia

#############################################
# Garamond script for CLI client operations #
#############################################
module GaramondCLIClient

using Sockets
using ArgParse
using Logging
using JSON


# Function that parses Garamond's client arguments
function get_client_commandline_arguments(args::Vector{String})
	s = ArgParseSettings()
	@add_arg_table s begin
        "query"
            help = "the search query"
            required = true
            default = ""
        "--log-level"
            help = "logging level"
            default = "info"
        "--log", "-l"
            help = "logging stream"
            default = "stdout"
        "--socket", "-s"
            help = "UNIX socket for data communication"
            default = "/tmp/garamond/sockets/socket1"
        "--pretty"
            help = "output is a pretty print of the results"
            action = :store_true
        "--max-matches"
            help = "maximum results to return"
            arg_type = Int
            default = 10
        "--search-type"
            help = "type of search"
            arg_type = Symbol
            default = :metadata
        "--search-method"
            help = "type of search"
            arg_type = Symbol
            default = :exact
        "--max-suggestions"
            help = "How many suggestions to return for each mismatched query term"
            arg_type = Int
            default = 0
	end

	return parse_args(args,s)
end


# Function that performs a simple search i.e. sends data to
# a socket, reads from the socket and outputs to STDOUT
function iosearch(connection, query)
    # Checks
    if isopen(connection)
        println(connection, query)
        @debug ">>> Query sent."
        response = readline(connection, keep=true)
        @debug "<<< Search results received."
    else
        @error "Connection is is closed."
    end
    # Deconstruct response
    data = deconstruct_response(response)
    # Return Dict
    println(stdout, data)
end


########################
# Main client function #
########################
function main()
    # Parse command line arguments
    args = get_client_commandline_arguments(ARGS)
    # Get the argument values
    log_level = args["log-level"]
    logging_stream = args["log"]
    socket = args["socket"]
    # Logging
    # TODO(Corneliu) Handle logging properly
    logger = ConsoleLogger(stdout, Logging.Debug)
    global_logger(logger)
    # Construct Garamond request
    request = construct_request(
                args["query"],
                args["max-matches"],
                args["search-type"],
                args["search-method"],
                args["max-suggestions"],
                args["pretty"])
    # Start client
    @debug "~ GARAMOND~ (client)"
    if !issocket(socket)
        @error "$socket is not a proper UNIX socket."
    end
    conn = connect(socket)
    # Search
    !isempty(request) && iosearch(conn, request)
    close(conn)
    return 0
end


# Function that constructs a Garamond request (can be a
# search request or a command) from a set of arguments
# that come usually from parsed client input arguments
function construct_request(query, max_matches, search_type,
                           search_method, max_suggestions,
                           pretty)
    # Check wether the query is actually a query or another command
    if occursin("!", query)
        cmd = replace(query, "!"=>"")
    else
        cmd = "search"
    end
    return JSON.json(
            Dict("command" => cmd,
                 "query" => query,
                 "max_matches" => max_matches,
                 "search_type" => search_type,
                 "search_method" => search_method,
                 "max_suggestions" => max_suggestions,
                 "pretty" => pretty
                )
           )*"\n"
end


# Deconstruct response is a pass through right now
# TODO(Corneliu) See whether is makes sense to compliate it
deconstruct_response(response::Vector{UInt8}) = join(Char.(response))


##############
# Run client #
##############
main()


end  # GaramondCLIClient
