#!/bin/julia

#############################################
# Garamond script for CLI client operations #
#############################################
module GaramondCLIClient

using Sockets
using ArgParse
using Logging
using JSON


# Function that parses Garamond's unix-socket client arguments
function get_unix_socket_client_arguments(args::Vector{String})
	s = ArgParseSettings()
	@add_arg_table s begin
        "query"
            help = "the search query"
            required = true
            default = ""
        "--log-level"
            help = "logging level"
            default = "warn"
        "--unix-socket", "-u"
            help = "UNIX socket for data communication"
            arg_type = String
            required = true
        "--pretty"
            help = "output is a pretty print of the results"
            action = :store_true
        "--max-matches"
            help = "maximum results to return"
            arg_type = Int
            default = 10
        "--search-type"
            help = "type of search"
            arg_type = Symbol
            default = :metadata
        "--search-method"
            help = "type of search"
            arg_type = Symbol
            default = :exact
        "--max-suggestions"
            help = "How many suggestions to return for each mismatched query term"
            arg_type = Int
            default = 0
        "--kill", "-k"
            help = "Kill the search engine server"
            action = :store_true
	end
	return parse_args(args,s)
end


# Function that performs a simple search i.e. sends data to
# a socket, reads from the socket and outputs to STDOUT
function iosearch(connection, request, pretty=false)
    # Checks
    if isopen(connection)
        println(connection, request)
        @debug ">>> Request sent."
        response = readline(connection, keep=true)
        @debug "<<< Search results received."
    else
        @error "Connection is closed."
    end
    # Deconstruct response
    data = deconstruct_response(response)
    if pretty
        # Replace all tabs with newlines
        println(stdout, replace(data, "\t"=>"\n"))
    else
        println(stdout, data)
    end
    return nothing
end


# Function that constructs a search server request (can be a
# search request or a command) from a set of arguments
# that come usually from parsed client input arguments
function construct_request(query, max_matches, search_type,
                           search_method, max_suggestions,
                           pretty, kill)
    # Check wether the query is actually a query or another command
    if kill
        op = "kill"
    else
        op = "search"
    end
    what_to_return = ifelse(pretty, "pretty-print", "json-index")
    return JSON.json(
            Dict("operation" => op,
                 "query" => query,
                 "max_matches" => max_matches,
                 "search_type" => search_type,
                 "search_method" => search_method,
                 "max_suggestions" => max_suggestions,
                 "what_to_return" => what_to_return
                )
           )
end


# Deconstruct response is a pass through right now
deconstruct_response(response) = response


########################
# Main client function #
########################
function main()
    # Parse command line arguments
    args = get_unix_socket_client_arguments(ARGS)
    # Logging
    log_levels = Dict("debug" => Logging.Debug,
                      "info" => Logging.Info,
                      "warning" => Logging.Warn,
                      "error" => Logging.Error)
    logger = ConsoleLogger(stdout, get(log_levels,
                                       args["log-level"],
                                       Logging.Info))
    global_logger(logger)
    # Construct Garamond request
    request = construct_request(args["query"],
                                args["max-matches"],
                                args["search-type"],
                                args["search-method"],
                                args["max-suggestions"],
                                args["pretty"],
                                args["kill"])
    # Start client
    @debug "~ GARAMOND~ (unix-socket client)"
    unixsocket = args["unix-socket"]
    if !issocket(unixsocket)
        @error "$unixsocket is not a proper UNIX socket."
    end
    conn = connect(unixsocket)
    # Search
    !isempty(request) && iosearch(conn, request, args["pretty"])
    close(conn)
    return 0
end


##############
# Run client #
##############
main()

end  # GaramondCLIClient
