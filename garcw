#!/bin/julia

#############################################
# Garamond script for TCP client operations #
#############################################
module GaramondWebClient

using Logging
using Sockets
using ArgParse
using HTTP


# Function that parses Garamond's web-socket client arguments
function get_web_socket_client_arguments(args::Vector{String})
	s = ArgParseSettings()
	@add_arg_table s begin
        "--log-level"
            help = "logging level"
            default = "warn"
        "--web-socket-port", "-w"
            help = "WEB socket data communication port"
            arg_type = UInt16
            required = true
        "--http-port", "-p"
            help = "HTTP port for the http server"
            arg_type = Int
            default = 9999
        "--web-page"
            help = "Search web page to serve"
            arg_type = String
	end
	return parse_args(args,s)
end


########################
# Main client function #
########################
function main()
    # Parse command line arguments
    args = get_web_socket_client_arguments(ARGS)
    # Logging
    log_levels = Dict("debug" => Logging.Debug,
                      "info" => Logging.Info,
                      "warning" => Logging.Warn,
                      "error" => Logging.Error)
    logger = ConsoleLogger(stdout, get(log_levels,
                                       args["log-level"],
                                       Logging.Info))
    global_logger(logger)
    # Start client
    @debug "~ GARAMOND~ (web-socket client)"
    ws_port = args["web-socket-port"]
    if ws_port <= 0
        @error "$ws_port is not a valid value for a web-socket."
    end
    # Get web page
    webpage_file = args["web-page"]
    if webpage_file != nothing && isfile(webpage_file)
        webpage = read(webpage_file, String)
    else
        webpage = _default_webpage(ws_port)
    end
    # Start HTTP server
    http_port = args["http-port"]
    _handler(request::HTTP.Request) = begin
        try
            return HTTP.Response(200, webpage)
        catch e
            return HTTP.Response(404, "Error: $e")
        end
    end
    HTTP.serve(host=ip"127.0.0.1", port=http_port, handler=_handler)
    return 0
end


# Function that returns the default webpage
function _default_webpage(ws_port::UInt16)
    return "
	<!doctype html>
	<html>
	<head>
	    <title>~ Garamond Search ~ by 0x0a Research </title>
	    <style>
		form {
			width:500px;
			margin:100px auto;
		}
		.search {
			width:300px;
			padding:8px 30px;
			background:rgba(100, 100, 100, 0.2);
			border:1px solid #000000;
			font-family: \'Times New Roman\';
			font-size: 15px;
		}
		.button {
			position:relative;
			padding:8px 25px;
			left:8px;
			border:1px solid #000000;
			background-color:#a0cfff;
			color:#000000;
			font-family: \'Times New Roman\';
			font-size: 15px;
		}
		.button:hover  {
			background-color:#fafafa;
			color:#000000;
		}
		#pby {
			font-family: \'Times New Roman\';
			font-size: 12px;
		}

		#search_results {
			font-family: \'Times New Roman\';
			font-size: 14px;
		}
	    </style>
	</head>
	<body>
		<!-- search section -->
		<div id=\"search_header\" style=\"position:fixed;float:left;top:0;height:50px;width:100%;\">
			<form id=\"search_box\">
				<input id=\"search_box_txt\" type=\"text\" class=\"search\" placeholder=\"Search...\" required>
				<input id=\"search_box_button\" type=\"button\" class=\"button\" value=\"Search\">
				<p id=\"pby\" align=\"right\"> powered by <b>0x0a Research</b></p>
			</form>
		</div>
		<!-- results section -->
		<div id=\"search_results\" style=\"position:fixed;float:left;left:100px;top:200px\">
		</div>

	<script type=\"text/javascript\">
		//document.addEventListener(\'DOMContentLoaded\', function (){
		//}, \'false\');

		// Global variables
		var connection = new WebSocket(\'ws://localhost:$ws_port\');
		var search_results = document.getElementById(\"search_results\");

		// When socket connection opened i.e. on page load
		connection.onopen = function(e){ console.log(\"websocket ok\")};

		//When receiving socket message
		connection.onmessage = function(r){
			window.lastmessage = r;
			console.log(\"Response received!\");

			// Response example: { \"etime\": 0.2,
			//			\"n_matches\": 3 ,
			//			\"matches\":<list of book Dicts>}
			jr = JSON.parse(r.data);

			// Process JSON data (access with jr.etime, etc)
			var search_time = jr.etime;
			var n_matches = jr.n_matches;
			var matches = jr.matches;

			results_text = \"<p>Elapsed search time: <b>\" + jr.etime + \"</b>s.</br></p>\";
			results_text += \"<br>\";
			results_text += \"<p>Found \" + jr.n_matches + \" results in \" + jr.n_corpora_match +
					\" corpora (out of a total of \" + jr.n_corpora + \"):</p>\";
			results_text += \"<p>\";

			for (let crps_id in jr.matches){
				let crps_matches = jr.matches[crps_id]  // individual corpus matches
				results_text +=\"<p><b>\" + crps_id +\"</b></br></p>\"
				for (i=0; i < crps_matches.length; i++){
					results_text += \"&emsp;<i> \\\"\" +
						crps_matches[i].name + \"\\\"</i>\" + \" by \" +
						crps_matches[i].author + \" <b>\" +
						crps_matches[i].publisher + \"</b>, \" +
						crps_matches[i].published_year + \"<br>\"
				}
			}
			results_text += \"</p>\"
			search_results.innerHTML = results_text;
		}


		// Send message function
		function sendMessage(q){
			console.log(\"Sending message...\");
			// Create JSON query
			var jq = {
				command: \"search\",
				query: q,
                max_matches: 1000,
                search_type: \"metadata\",
                search_method: \"exact\",
                max_suggestions: 0,
                what_to_return: \"json-data\"
				//date: Date()
			}
			connection.send(JSON.stringify(jq));
		}

		// Variables for the search box and button
		var search_box = document.getElementById(\"search_box\"),
		    search_box_button = document.getElementById(\"search_box_button\"),
		    serch_box_txt = document.getElementById(\"search_box_txt\");

		// When clicking the button
		search_box_button.onclick = function(){
			search_box_txt.value = \"\"
			sendMessage(search_box_txt.value);
		};

		// When submitting the form
		search_box.onsubmit = function(){
			sendMessage(search_box_txt.value);
			search_box_txt.value = \"\"
			return false;
		};

		// Close web socket when page is reloaded
		window.onunload = function() {
			window.alert(\"CLOSING\");
			console.log(\"closing web socket...\");
			connection.close();
		};
	</script>

	</body>

	</html>"
end


##############
# Run client #
##############
main()

end  # GaramondWebClient
