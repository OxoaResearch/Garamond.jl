#!/bin/julia

#########################################
# Garamond script for server operations #
#########################################
module GaramondServer

using Pkg
Pkg.activate(@__DIR__)
using Garamond
using Sockets
using Logging


# Function that parses Garamond's server arguments
function get_server_commandline_arguments(args::Vector{String})
	s = ArgParseSettings()
	@add_arg_table s begin
        "--data-config", "-d"
            help = "data configuration file"
            action = :append_arg
        "--log-level"
            help = "logging level"
            default = "info"
        "--log", "-l"
            help = "logging stream"
            default = "stdout"
        "--socket", "-s"
            help = "UNIX socket for data communication"
            default = "/tmp/garamond/sockets/socket1"
        "--port", "-p"
            help = "WEB socket data communication port"
            arg_type = Int
            default = -1
	end

	return parse_args(args,s)
end


########################
# Main module function #
########################
function main()
    # Parse command line arguments
    args = get_server_commandline_arguments(ARGS)
    # Get the argument values
    data_config_paths = String.(args["data-config"])
    log_level = args["log-level"]
    logging_stream = args["log"]
    socket = args["socket"]
    # Logging
    logger = Garamond.build_logger(logging_stream, log_level)
    global_logger(logger)
    # Start Garamond in either server or client mode
    @debug "~ GARAMOND ~ $(Garamond.printable_version())\n"
    # Start Server #
    ################
    Garamond.fsm(data_config_paths, socket)
    return 0
end


################################
# Start main Garamond function #
################################
main()

end # GaramondServer
